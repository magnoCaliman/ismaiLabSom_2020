Bloco de notas colaborativo: http://collabedit.com/pewt5

* AULA 01.1 - 21/09/2020
- Softwares
  - Supercollider: https://supercollider.github.io/
  - SonicPi - https://sonic-pi.net/
  - Reaper: https://www.reaper.fm/

* AULA 01.2 - 24/09/2020
- Não houve. Para compensar.
  - Compensada no dia 09/11/2020
* AULA 02.1 - 28/09/2020

** SUPERCOLLIDER

#+BEGIN_QUOTE
A platform for audio synthesis and algorithmic composition, used by musicians, artists, and researchers working with sound.
#+END_QUOTE

- Copiem esse código na IDE do SC:

#+BEGIN_SRC ruby
//bem vindos ao SuperCollider

2+2

3*((57/4.7)*pi.sqrt)

rrand(10, 50)

"no Processing isso aqui se chamava 'println()'".postln

Env.perc.test

s.boot //se não ligar o servidor, não há som...

{(SinOsc.ar(MouseX.kr(440,880), mul:0.05))!2}.play

{LFSaw.ar(LFTri.kr(XLine.kr(1, 500, 15)).range(100, 666), mul:0.05)!2}.play

{Pulse.ar(LFNoise0.kr(10).range(200, 800), mul:0.05)!2}.play

{LPF.ar(WhiteNoise.ar(mul: 0.1), MouseX.kr(100, 10000))!2}.play

{GVerb.ar(Resonz.ar(LFNoise0.ar(10), 2000, 0.05, mul: 0.5))!2}.play
#+END_SRC

- Dois atalhos de teclado mais importantes
  - shift + enter -> avalia uma linha de código
  - ctrl + . (ponto) -> interrompe todos os sons

- Disco feito com SC, com códigos de menos de 140 caracteres: https://archive.org/details/sc140
* AULA 02.2 - 01/10/2020

- Som acústico & Forma de onda
  - https://www.youtube.com/watch?v=RpT-h5tPYdw
  - https://animagraffs.com/loudspeaker/
  - https://www.youtube.com/watch?v=GuCdsyCWmt8&t=314s

- Síntese sonora & Osciladores
  - Frequência
  - Amplitude


- Código:
#+BEGIN_SRC ruby
s.boot //liga o servidor. sem isso, nada funciona!

{}.play //tudo dentro das chavetas, vai soar

//osciladores, funções geradoras de som
SinOsc.ar()
LFSaw.ar()
LFTri.ar()
LFPulse.ar()

//funções recebem argumentos dentro dos parênteses
//qual a diferença de sintaxe entre o SC e Processing?
{SinOsc.ar(freq:300, mul:0.2)}.play

//de agora em diante, usando "!2" para ouvir nos dois fones
{SinOsc.ar(freq:300, mul:0.2)!2}.play

//FREQUÊNCIA e AMPLITUDE
{SinOsc.ar(freq:300, mul:0.2)!2}.play
{SinOsc.ar(freq:600, mul:0.2)!2}.play

{SinOsc.ar(freq:600, mul:0.1)!2}.play
{SinOsc.ar(freq:600, mul:0.5)!2}.play

//IMPORTANTE: NÃO USAR VALORES DE AMPLITUDES MAIORES QUE 1!

//quais os equivalentes perceptivos (para a escuta) dos parâmetros "freq" e "mul"?

//no lugar de .play, vamos usar .plot() para visualizar:
//.plot() recebe, dentro dos parênteses, a duração em segundos
{SinOsc.ar(freq:300, mul:0.2)}.plot(1/300)

//podemos usar listas de dois valores entre colchetes [] para comparar visualizações diferentes
{SinOsc.ar(freq:[300, 600], mul:0.2)}.plot(1/300)
{SinOsc.ar(freq:300, mul:[0.1, 0.5])}.plot(1/300)

//FORMAS DE ONDA
//mesma frequência, mas diferentes osciladores
//soam diferentes?
{SinOsc.ar(freq:300, mul:0.1)!2}.play
{LFPulse.ar(freq:300, mul:0.1)!2}.play
{LFTri.ar(freq:300, mul:0.1)!2}.play
{LFSaw.ar(freq:300, mul:0.1)!2}.play

//vamos visualizar as diferentes formas de onda
//(não se preocupe se vc não entende a sintaxe desse exemplo...)
({[
	SinOsc.ar(freq:300),               //ONDA SENÓIDE
	LFSaw.ar(freq:300),                //ONDA DENTE-DE-SERRA
	LFPulse.ar(freq:300, add:-0.5),    //ONDA QUADRADA
	LFTri.ar(freq:300)                 //ONDA TRIANGULAR
]}.plot(1/30))

//como cada forma de onda modifica a movimentação da coluna?

//EXERCÍCIOS
//1 - crie osciladores simples, para se familiarizar com a sintaxe do SC, os valores possíveis de amplitude e frequência, e a sonoridade de cada forma de onda.
//2 - crie osciladores, e explore as sonoridades que surgem quando diferentes frequências soam *ao mesmo tempo*. por exemplo: o que acontece quando duas senóides com diferença de 1Hz entre si soam juntas?

//dica: para executar mais de uma linha ao mesmo tempo, coloque parênteses "()" em volta das várias linhas, um ponto e vírgula ao final ";" de cada linha, e avalie usando control + enter. assim:
(
{SinOsc.ar(freq: 300, mul:0.1)!2}.play;
{SinOsc.ar(freq: 450, mul:0.1)!2}.play;
)
#+END_SRC
* AULA 03.1 - 05/10/2020
- Feriado
* AULA 03.2 - 08/10/2020
- Continuação discussão da aula 2.2
* AULA 04.1 - 12/10/2020
#+BEGIN_SRC ruby
//para avaliar dois osciladores simultaneamente, criar um bloco de código usando parêntesis (), e avaliar com ctrl + enter (no Mac, command + enter)
(
{​​​​SinOsc.ar (freq:400, mul:0.2)!2}​​​​.play;
{​​​​SinOsc.ar (freq:410, mul:0.2)!2}​​​​.play;
)

//dois osciladores com frequências muito próximas causam interferência entre si, e não são ouvidos como dois sons separados. mas sim como um som somente, onde a amplitude se modifica no tempo (um "fade in" e "fade out" automático...). esse "fade" tem uma relação direta com a diferença de frequência entre os dois osciladores.
401 - 400 = 1 Hertz de diferença entre os osciladores
402 - 400 = 2 Hertz
410 - 400 = 10 Hertz

//quando que começamos a ouvir os dois osciladores separadamente?
Miguel - entre 6 Hz e 10 Hz de diferença
Joana - 2 Hz ou 6 Hz
Jade - 6 Hz
Magno - 13 Hz
#+END_SRC
* AULA 04.2 - 15/10/2020
- Não houve. Para compensar (não consta no sistema).
* AULA 05.1 - 19/10/2020
- Código:
#+BEGIN_SRC ruby
(
{SinOsc.ar(300, mul:0.1)!2}.play;
{SinOsc.ar(301, mul:0.1)!2}.play;
)

//um pouco chato ter que desligar todos os processos sonoros (ctrl + .) e religar para testar diferentes valores, não?
//vamos tentar modificar a frequência interativamente...

//lembrete de conceito importante em programação: FUNÇÕES PODEM SER ARGUMENTOS DE OUTRAS FUNÇÕES!

{SinOsc.ar(freq:Rand(lo:300, hi:800), mul:0.1)!2}.play
//função Rand() retorna um valor, que é então usado para controlar o argumento freq da senóide

//seria interessante se pudessemos ver os valores que Rand() retorna. podemos "perguntar" esses valores usando o método ".poll"
//obs: "método" é o nome dado para as instruções que são escritas depois do ponto final. em programação essa sintaxe se chama "dot notation". já conhecemos dois métodos, ".play" e ".plot". hoje adicionamos mais um, o .poll

{SinOsc.ar(freq:Rand(lo:300, hi:800).poll, mul:0.1)!2}.play
//avalie essa linha e observe a post window
//o que está acontecendo aqui?

/////

//vejamos então a função MouseX.kr()
//avalie a linha abaixo
{MouseX.kr(minval:1, maxval:10)}.play

//parece que nada está funcionado. mas garanto que está. só não conseguimos ver.
//vamos "perguntar" para a função MouseX.kr o que ela está fazendo, usando o método .poll
{MouseX.kr(minval:1, maxval:10).poll}.play

//como então podemos usar a função MouseX.kr para KRONTROLAR a frequência de um oscilador (e ver os seus valores)?

//sugestão do Miguel:
{SinOsc.ar(freq:MouseX.kr(minval:500, maxval:100),mul:0.1)}.play;
//reparem no uso invertido dos valores dos argumentos minval e maxval. não está errado! pode até ser interessante. algo como isso:

(
{SinOsc.ar(freq:MouseX.kr(minval:500, maxval:100).poll, mul:0.1)!2}.play;
{SinOsc.ar(freq:MouseX.kr(minval:100, maxval:500).poll, mul:0.1)!2}.play;
)
//o que acontece quando o mouse está no meio da tela?











//agora nosso teste de psicoacústica é mais interativo
(
{SinOsc.ar(freq:300, mul:0.2)!2}.play;
{SinOsc.ar(freq:MouseX.kr(minval:300, maxval:350).poll, mul:0.2)!2}.play;
)

//detalhe: a função MouseX.kr() tem uma irmã: MouseY.kr()
{MouseY.kr(minval:100, maxval:666).poll}.play


//EXERCÍCIO!
//1 - Experimente com  os procedimentos mostrados acima, utilizandos os outros três geradores de som que conhecemos que NÃO SÃO o SinOsc.ar(). eles estão listados na Aula 02.2
//lembrete: cuidado com valores do argumento mul! no exemplo abaixo, reparem que o valor de mul é 0.05, NÃO 0.5.
(
{LFPulse.ar(freq:50.5, mul:0.05)!2}.play;
{LFPulse.ar(freq:MouseY.kr(minval:50, maxval:60), mul:0.05)!2}.play;
)
#+END_SRC

- Referências extras:
  - Teremin: https://en.wikipedia.org/wiki/Theremin
    - 1950's SciFi - https://www.youtube.com/watch?v=nYaT704C7_w
    - Clara Rockmore - https://www.youtube.com/watch?v=pSzTPGlNa5U
    - Carolina Eyck
      - https://www.youtube.com/watch?v=ajM4vYCZMZk
      - https://www.youtube.com/watch?v=MJACNHHuGp0
    - Julia Teles - https://juliateles.com/composicoes
  - Para pensar: no nosso oscilador ~SinOsc.ar()~, controlado por ~MouseX.kr()~, que características sonoras (ou seja, algo que podemos perceber na escuta) remetem ao teremin? 
* AULA 05.2 - 22/10/2020
- Para compensar (EAD não válida no sistema)
  - Compensada no dia 23/11/2020

- Gerando arquivos de áudio com SuperCollider

- Código:
#+BEGIN_SRC ruby
s.boot //sem isso, nada funciona...

//como gravar o som gerado pelo SC em um arquivo de áudio?
//siga os três passos a seguir, na sequência:

//1 - comece a gravação
//repare nas mensagens que aparecem na post window (além de um pequeno "R" vermelho no canto inferior direito da barra de status)
s.record(numChannels:1)

//2 - gere algum som
(
{LFPulse.ar(freq:50.5, mul:0.1)!2}.play;
{LFPulse.ar(freq:MouseY.kr(minval:50, maxval:60), mul:0.1)!2}.play;
)

//3 - pare a gravação
//novamente, veja o que diz a post window
s.stopRecording

//pronto, está gravado. mas onde está o arquivo de áudio?
//a post window te dá o caminho. No Windows: "path: C:\Users\SEU USUÁRIO\Documents\SuperCollider\Recording\...". Ou no macOS "path: /Users/SEU USUÁRIO/Music/..."

//você também pode avaliar essa linha para descobrir o endereço da pasta
thisProcess.platform.recordingsDir
#+END_SRC

- Reaper:
  - https://www.reaper.fm/

- Procedimentos para investigar
  - Importando arquivos
  - Controles do tracks
    - Volume
    - Solo / mute
    - Indicador de nível
  - Track master
  - Controle de itens
    - Posição
    - Tamanho / cortes + snap
    - Volume
    - Fade-in / fade-out
  - Salvando o projeto
    - Quando salvar, marcar as opções:
      - "Create subdirectory for project" & "Copy all media into project directory"
    - Gerenciamento de assets
      - Preferences > Media > "Copy imported media to project media directory"

* AULA 06.1 - 26/10/2020
- Continuação discussão da aula 05.2
* AULA 06.2 - 29/10/2020
- Edição básica (corte, fade, posição, volume) como intervenção criativa:
  - The Amen Break - https://www.youtube.com/watch?v=rvCZ-HmXtCc
    - The Most Sampled Loop in Music History - https://www.youtube.com/watch?v=v89CjsSOJ_c
    - The History of The Amen Break - https://www.youtube.com/watch?v=FFKMtv8tU0U
  
  - Narrativas sonoras
    - Johannes Kreidler - /Hitle's Rage remixed in order of volume/ - https://www.youtube.com/watch?v=qpAz8zXvnww
    - Henrique Iwao
      - /caboclo faroeste/ - https://soundcloud.com/henrique-iwao/caboclo-faroeste
      - Original, para referência - https://www.youtube.com/watch?v=U3ewnBFOkME
      - Disco /Coleções Digitais/ - https://seminalrecords.bandcamp.com/album/cole-es-digitais

- Exercício!
  - No Reaper, utilizar os principios de edição até aqui vistos para construir uma narrativa sonora com aproximadamente 1m30s de duração.
  - Os samples manipulados devem ser, preferencialmente, gerados através dos procedimentos de síntese estudados no SuperCollider.
    - Dica: revisar as várias opções de geração sonora vistas até aqui: formas de ondas diversas, interferência entre osciladores que soam ao mesmo tempo, controle de parâmetros através de input do mouse, etc.
  - Considere os sons gerados no SC não como resultado final, mas como /ponto de partida/ de um processo de experimentação sonora que acontecerá através das manipulações efetuadas no Reaper. 
* AULA 07.1 - 02/11/2020
- Exemplos discutidos em aula
  - "Every Other Beat" meme:
    - https://www.youtube.com/watch?v=jLvDnRU_ajk
    - https://www.youtube.com/watch?v=1d6kkZFA6xo
    - https://www.youtube.com/watch?v=fG8uKIqt9Nc
    - https://www.youtube.com/watch?v=q79qO3-PWeQ
  - Vale da estranheza ("Uncanny Valley")
    - https://pt.wikipedia.org/wiki/Vale_da_estranheza
    - https://en.wikipedia.org/wiki/Uncanny_valley
    - https://mummyboon.files.wordpress.com/2014/10/uncanny-valley.jpg?w=545&h=272
    - https://www.google.com/search?tbm=isch&q=sonic%20the%20movie&tbs=imgo:1#imgrc=Ooo4o5VoyzxdfM
    - https://www.google.com/search?tbm=isch&q=ex%20machina&tbs=imgo:1
* AULA 07.2 - 05/11/2020
- Continuação discussão da aula 6.2
* AULA 08.1 - 09/11/2020
- Aula em horário regular (10:15 às 11:15) + compensação da aula 01.2 - 24/09/2020 (11:15 às 13:15)

- Conceitos:
  - Textura
    - Densidade
    - Articulação
  - Parametrização
    - Contraste

[[/aula08.1/textura.png]]

- Exemplos:
  - Skrillex - https://www.youtube.com/watch?v=2cXDgFwE13g
  - Lil Mama - https://www.youtube.com/watch?v=BCvXzjGRnKc
  - Ligeti - https://www.youtube.com/watch?v=iPgwF3G5i4k
  - Hurt Locker - https://www.youtube.com/watch?v=HsFVDM1lffM
  - Lost Highway - https://www.youtube.com/watch?v=qZowK0NAvig
* AULA 08.2 - 12/11/2020
- Não houve. Para compensar.
* AULA 09.1 - 16/11/2020
- Continuação da discussão da aula 08.1
* AULA 09.2 - 19/11/2020
- Kathryn Bigelow - The Hurt Locker (2008):
  - [[/aula09.2/hurtLocker.mov][Pasta da aula 09.2]] (clicar no botão /Download/ à direita)
  - IMDB: https://www.imdb.com/title/tt0887912/

- Conceitos:
  - Diegese

- Links extras vistos em aula:
  - Tinnitus - https://en.wikipedia.org/wiki/Tinnitus
  - Every Frame a Painting - Jacki Chan - How to Do Action Comedy - https://www.youtube.com/watch?v=Z1PCtIaM_GQ
  - Nerdwriter1 - https://www.youtube.com/user/Nerdwriter1/videos

* AULA 10.1 - 23/11/2020
- Aula em horário regular (10:15 às 11:15) + compensação da aula 05.2 - 22/10/2020 (11:15 às 13:15)

- David Lynch - Lost Highway (1997):
  - [[/aula10.1/lostHighway.mov][Pasta da aula 10.1 ]](clicar no botão /Download/ à direita)
  - IMDB: https://www.imdb.com/title/tt0116922/?ref_=nm_flmg_wr_39

- The Sound of David Lynch - https://www.youtube.com/watch?v=lanvoUilIt4

- Conceitos:
  - Universo ficcional
  - Representação da realidade

- Exercício!
  - Realizar análise em texto (entre 1/2 e 1 página de tamanho) de trecho de filme escolhido para aula de Estruturas Narrativas.
  - Essa análise deve elaborar como o som presente na cena informa a construção da narrativa global.
    - Demonstre como os /parâmetros sonoros/ estudados (frequência, amplitude, textura, etc) se relacionam com outros elementos do objeto audiovisual (planos, diálogo, tempo, construção do personagem, etc).
    - Tente responder perguntas como "Por que esse som está aqui?", "Qual função ele cumpre?", "Por será que esse som foi construído dessa maneira?".
  - Para as cenas que por ventura não tenham elementos sonoros suficientes para análise, escolha outra cena do mesmo filme.
* AULA 10.2 - 26/11/2020
- Processamento de áudio
  - Síntese -> desenhar em uma página em branco
  - Processamento -> manipular imagem já existente

- Slides: [[/aula10.2/aula10.2_pluginsProcessamento.pdf][Pasta da aula 10.2]]

- Nova pasta na raiz do Github: [[/bancoSons][Banco de sons]]

- Exercício!
  - Experimentar livremente com o plugin de delay incluído no Reaper (JS: Delay), e criar sessão que contenha entre 3 e 5 arquivos do banco de sons.
  - Lembrete: os procedimentos de edição já estudados como corte, fades, volume, etc, podem (e devem!) ser utilizados também.
* AULA 11.1 - 03/12/2020
- Slides + exemplos sonoros:  [[https://github.com/magnoCaliman/ismaiLabSom_2020-1/tree/master/aula11.1][Pasta da aula 11.1]]

[[/aula11.1/correcaoCor_crop.png]]

- Tipos de filtro do ReaEQ:
  - High Pass
  - Low Pass
  - Band (reject)
  - Band Pass

- Sessões para exemplo:
  - guitarraRuido.wav
  - paisagemSonora.rpp

- Exercícios!
  - 1. Ouvir o arquivo [[/aula11.1/wanda.mp3][wanda.mp3]] ou [[/aula11.1/mantra.wav][mantra.wav]], investigar possíveis regiões de frequência que considere problemáticas, e remover com a utilização de filtros equalizadores.
  - 2. Criar uma paisagem sonora onde gravações de ambientes distintos são ouvidas simultaneamente, e a equalização é utilizada para "corrigir a cor", aglutinando sonoramente as várias fontes sonoras. Dica: https://freesound.org/ para buscar sons gratuitos. 
* AULA 12.1 - 10/12/2020
- Continuação discussão aula 11.1
* AULA 13.1 - 14/12/2020
** AVALIAÇÃO - MOMENTO 1 (50%) - EXERCÍCIOS
- Descrição
  - Entrega dos exercícios temáticos propostos ao longo do semestre, nas aulas:
    - Aula 02.2 - 2 exercícios
    - Aula 05.1 - 1 exercício
    - Aula 06.2 - 1 exercício
    - Aula 10.1 - 1 exercício
    - Aula 10.2 - 1 exercício
    - Aula 11.1 - 2 exercícios
      - *TOTAL*: --> 8 exercícios
- Formato de entrega:
  - Arquivo zip contendo todos os arquivos de cada exercícico, *organizados em ficheiros de acordo com o números das aulas*
  - Para os exercícios que envolvem utilização do SuperCollider, deve ser enviado o arquivo com código (.scd) 
  - Para os exercícios que envolvem criação de sessões no Reaper, deve ser enviada pasta contendo o arquivo da sessão (.rpp) *e todos os arquivos de mídia para que a sessão seja válida!*
  - Para o exercício de análise de cena (aula 10.1) deve ser enviado arquivo PDF com texto + video da cena analisada (junto do zip, ou link para download externo)
- Data de entrega:
  - 18/12/2020
** AVALIAÇÃO - MOMENTO 2 (50%) - PROJETO FINAL
- Descrição:
  - Apresentação de objeto artístico-exploratório em media de livre escolha (video, instalação interativa, impresso, escultura, web art, etc.) que integre uma componente sonora à outros elementos multimédia
  - O objeto deve necessariamente fazer uso de outras medias, portanto não deve ser somente sonoro
  - É altamente recomendado que o trabalho seja criado especificamente para essa cadeira, ou criado em conjunto com trabalho de outra cadeira *desse semestre*, uma vez que o objetivo é desenvolver e pensar a dimensão sonora em conjunção com outras formas de expressão (e não apenas como suporte)
  - Para projetos onde não seja possível a realização física, é permitida a proposição de protótipo junto de descrição em PDF
- Formato de entrega:
  - Arquivo digital do projeto em seu formato específico
  - PDF contendo texto inverstigativo, maquete visual (caso se aplique) e texto técnico
  - Pasta da sessão do Reaper contendo as mídias criadas
  - Código fonte de SuperCollider (caso se aplique)
  - Deve ser submetido no portal da ISMAI, na opção "Entrega de trabalhos"
  - O projeto pode ser realizado individualmente, ou em duplas
- Datas de entrega:
  - 04/01/2021 - Apresentação verbal de *5 minutos* com idéia principal do projeto
  - Última semana de aulas (entre 18 e 21 de Janeiro-2021) - Entrega final e talvez apresentação para turma (à confirmar)

